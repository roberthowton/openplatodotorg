---
// Source: https://github.com/raffazizzi/astro-tei/blob/bfb46d2dce80abf31cab174aae78b0cc401701b9/packages/core/src/Tei.astro
import TeiStyle from "../styles/tei-style.astro";
import { type ProcessedTei } from "../utils/processTei.ts";
export interface Props {
  useBehaviors?: boolean;
  teiData: ProcessedTei;
  rootId?: string;
}

let { teiData, useBehaviors = true, rootId } = Astro.props;

// Expand self-closing elements
const tei = teiData.serialized.replace(
  /<([^\s\/]+)([^>]*?)\/>/gm,
  "<$1$2></$1>",
);
---

<script>
  import { customBehaviors } from "../utils";
  import CETEI from "CETEIcean";

  class Tei extends HTMLElement {
    connectedCallback() {
      if (this.dataset.rootId) {
        this.id = this.dataset.rootId;
      }

      const teiDom = this.firstChild as HTMLElement;

      if (this.dataset.usebehaviors === "true") {
        const ceteicean = new CETEI();
        ceteicean.addBehaviors({
          tei: {
            ...customBehaviors,
          },
        });
        ceteicean.els = this.dataset.elements?.split(",");
        ceteicean.utilities.dom = teiDom;
        ceteicean.applyBehaviors();
      }
      // Display TEI content only after behaviors are applied to avoid flickering
      this.style.display = "block";
    }
  }

  customElements.define("tei-container", Tei);
</script>

<tei-container
  set:html={tei}
  data-root-id={rootId}
  data-usebehaviors={useBehaviors.toString()}
  data-elements={teiData.elements.toString()}
  style="display: none;"
/>

<TeiStyle />
